inp = [input().split(';') for _ in range(int(input()))]
table = {}

for i in range(len(inp)):

    command1, score1, command2, score2 = inp[i]
    commands = [command1, command2]

    for command in commands:
        if command not in table:
            table[command] = [0, 0, 0, 0, 0]

        table[command][0] += 1

    if score1 > score2:
        table[command1][1] += 1
        table[command2][3] += 1
    elif score1 == score2:
        table[command1][2] += 1
        table[command2][2] += 1
    else:
        table[command1][3] += 1
        table[command2][1] += 1

    for command in commands:
        table[command][4] = table[command][1] * 3 + table[command][2]

print('\n'.join((lambda t: [key + ':' + ' '.join([str(c) for c in t[key]]) for key in t])(table)))
"e = {k: v for (k, v) in zip(input(), input())}
d = dict(map(reversed, e.items()))
print(''.join((lambda s: [e[c] for c in s])(input())) + '\n' + ''.join((lambda s: [d[c] for c in s])(input())))
"x, y = 0, 0

for _ in range(int(input())):
    cmd = input().split()
    x += (lambda s: int(s[1]) if s[0] == 'восток' else 0)(cmd)
    x -= (lambda s: int(s[1]) if s[0] == 'запад' else 0)(cmd)
    y += (lambda s: int(s[1]) if s[0] == 'север' else 0)(cmd)
    y -= (lambda s: int(s[1]) if s[0] == 'юг' else 0)(cmd)

print(x, y)
print(sum([int(input()) for _ in range(int(input()))])),
def closest_mod_5(x):
    while x % 5 or x < 5:
        x += 1
    return x
"scopes = {'global': {'uplink': None, 'vars': []}}

def create(scope, uplink):
    scopes.update({scope: {'uplink': uplink, 'vars': []}})

def add(scope, var):
    scopes[scope]['vars'] += [var]

def get(scope, var):
    if var in scopes[scope]['vars']:
        print(scope)
    elif scopes[scope]['uplink']:
        get(scopes[scope]['uplink'], var)
    else:
        print(None)

[(lambda x: eval(x[0] + '(\'' + x[1] + '\',\'' + x[2] + '\')'))(input().split()) for _ in range(int(input()))]
"class Buffer:
    def __init__(self):
        self.seq = []

    def add(self, *a):
        self.seq += [*a]
        while len(self.seq) > 4:
            print(sum([self.seq.pop(0) for _ in range(5)]))

    def get_current_part(self):
        return self.seq
"class LoggableList(list, Loggable):
    def append(self, arg):
        super().append(arg)
        self.log(arg)
"print((__import__('datetime').date(*map(int, input().split())) + __import__('datetime').timedelta(int(input()))).strftime('%Y %-m %-d'))
"class multifilter:
    def judge_half(cnt): return cnt[0] >= cnt[1]
    def judge_any(cnt): return cnt[0] > 0
    def judge_all(cnt): return not cnt[1]

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable, self.funcs, self.judge = iterable, funcs, judge

    def __iter__(self):
        return (elem for elem in self.iterable 
                if self.judge((lambda x: (x.count(True), x.count(False)))([f(elem) for f in self.funcs])))
"def primes():
    i = 1
    while True:
        i += 1
        for j in range(2, i):
            if not i % j:
                break
        else:
            yield i
"s, a, b = (input() for _ in range(3))

if a in b and a in s:
    print('Impossible')
else:
    cnt = 0
    while s != s.replace(a, b):
        s = s.replace(a, b)
        cnt += 1
    print(cnt)
"print((lambda s, t: [s[i:i+len(t)].find(t) for i in range(len(s))])(input(), input()).count(0))
"[print(line.rstrip()) for line in __import__('sys').stdin if len(__import__('re').findall(r""cat"
line)) > 1]
"[print(line.rstrip()) for line in __import__('sys').stdin if __import__('re').search(r'\bcat\b', line)]
"[print(line.rstrip()) for line in __import__('sys').stdin if __import__('re').search(r'z.{3}z', line)]
"[print(line, end='') for line in __import__('sys').stdin if __import__('re').fullmatch(r'(0+|1(01*0)*1)+\s', line)]
"print((lambda where, what: 'Yes' if [1 if what in __import__('re').findall(r""<a href=\""([\w:/.]+)\"">"
__import__('requests').get(x).text) else 0 for x in where].count(1) else 'No')(__import__('re').findall(r""<a href=\""([\w:/.]+)\"">"

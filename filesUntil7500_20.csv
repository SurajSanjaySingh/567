"from skimage.io import imread, imsave
from numpy import clip


def search_bright_min_max(image):

    pixels = sorted(image.flatten().tolist())
    pixels_length = len(pixels)
    k = round(pixels_length * 0.05)
    sliced_pixels = pixels[k + 1:pixels_length - k]

    return sliced_pixels[0], sliced_pixels[-1]


def stable_auto_contrast(image):
    
    max_bright = 255
    image_min = search_bright_min_max(image)[0]
    image_max = search_bright_min_max(image)[1]
    
    return (image - image_min) * (max_bright / (image_max - image_min))


img = imread('img.png')
comp_img = stable_auto_contrast(img.astype('float'))
out_img = clip(comp_img, 0, 255)
imsave('out_img.png', out_img.astype('uint8'))
"from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte
from numpy import clip, dstack


def search_bright_min_max(image):

    pixels = sorted(image.flatten().tolist())
    pixels_length = len(pixels)
    k = round(pixels_length * 0.05)
    sliced_pixels = pixels[k + 1:pixels_length - k]

    return sliced_pixels[0], sliced_pixels[-1]


def stable_auto_contrast(image):

    max_bright = 1
    image_min = search_bright_min_max(image)[0]
    image_max = search_bright_min_max(image)[1]

    return (image - image_min) * (max_bright / (image_max - image_min))


img = img_as_float(imread('img.png'))

r = img[:, :, 0]
g = img[:, :, 1]
b = img[:, :, 2]

y = 0.2126 * r + 0.7152 * g + 0.0722 * b
u = -0.0999 * r - 0.3360 * g + 0.4360 * b
v = 0.6150 * r - 0.5586 * g - 0.0563 * b

y = clip(stable_auto_contrast(y), 0, 1)

r = y + 1.2803 * v
g = y - 0.2148 * u - 0.3805 * v
b = y + 2.1279 * u

out_img = clip(dstack((r, g, b)), 0, 1)
imsave('out_img.png', img_as_ubyte(out_img))
"from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte
from numpy import clip, dstack


def get_grey_world_coefficients(image):

    red_average = image[:, :, 0].mean()
    green_average = image[:, :, 1].mean()
    blue_average = image[:, :, 2].mean()

    average = (red_average + green_average + blue_average) / 3

    red_coefficient = red_average / average
    green_coefficient = green_average / average
    blue_coefficient = blue_average / average

    return red_coefficient, green_coefficient, blue_coefficient


img = img_as_float(imread('img.png'))

r_w, g_w, b_w = get_grey_world_coefficients(img)
new_r, new_g, new_b = img[:, :, 0] / r_w, img[:, :, 1] / g_w, img[:, :, 2] / b_w
out_img = clip(dstack((new_r, new_g, new_b)), 0, 1)

imsave('out_img.png', img_as_ubyte(out_img))
"from skimage.io import imread, imsave
from numpy import histogram


def cdf(x, h):
    return h[:x + 1].sum()


def find_min_cdf(cdfs):
    for key in sorted(cdfs.keys()):
        if cdfs[key] != 0:
            return cdfs[key]


img = imread('img.png')
img_shape = img.shape
h, bins = histogram(img, bins=range(257))

cdfs = {i: cdf(i, h) for i in range(256)}
cdf_min = find_min_cdf(cdfs)
d = h.sum() - 1
max_bright = 255
img_ = img.ravel()

for i in range(len(img_)):
    img_[i] = round(((cdfs[img_[i]] - cdf_min) / d) * max_bright)

imsave('out_img.png', img_.reshape(img_shape))
"import numpy as np
from skimage.io import imread, imsave


def convolution_step(batch, kernel):
    return (batch * kernel).sum() / kernel.sum()


def convolution(image, kernel):

    convolved_image = np.zeros((image.shape[0] - kernel.shape[0] + 1, image.shape[1] - kernel.shape[1] + 1))

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + kernel.shape[0] <= image.shape[0] and col + kernel.shape[1] <= image.shape[1]:
                batch = image[row:row + kernel.shape[0], col:col + kernel.shape[1]]
                convolved_image[row][col] = convolution_step(batch, kernel)
            else:
                continue

    return convolved_image


img = imread('img.png')
kernel = np.ones((5, 5))

imsave('out_img.png', convolution(img, kernel).astype('uint8'))
"import numpy as np


def gaussian(sigma, x, y):
    return (1 / (2 * np.pi * sigma ** 2)) * np.e ** ((-x ** 2 - y ** 2) / (2 * sigma ** 2))


sigma, x, y = [int(x) for x in input().split()]
print(gaussian(sigma, x, y))
"import numpy as np


def gaussian(sigma, x, y):
    return (1 / (2 * np.pi * sigma ** 2)) * np.e ** ((-x ** 2 - y ** 2) / (2 * sigma ** 2))


def create_gauss_core(sigma):
    k = round(3 * sigma) * 2 + 1
    gauss_core = np.ones((k, k))
    x = np.arange(-(k // 2), k // 2 + 1)
    y = np.arange(k // 2, -(k // 2 + 1), -1)

    for row in range(gauss_core.shape[0]):
        for col in range(gauss_core.shape[1]):
            gauss_core[row][col] = gaussian(sigma, x[row], y[col])

    return gauss_core / gauss_core.sum()


sigma = float(input())
gauss_core = create_gauss_core(sigma)

for row in range(gauss_core.shape[0]):
    for val in gauss_core[row]:
        print('%.5f' % val, end=' ')
    print()
"import numpy as np
from skimage.io import imread, imsave


def gaussian(sigma, x, y):
    return (1 / (2 * np.pi * sigma ** 2)) * np.e ** ((-x ** 2 - y ** 2) / (2 * sigma ** 2))


def create_gauss_core(sigma):
    k = round(3 * sigma) * 2 + 1
    gauss_core = np.ones((k, k))
    x = np.arange(-(k // 2), k // 2 + 1)
    y = np.arange(k // 2, -(k // 2 + 1), -1)

    for row in range(gauss_core.shape[0]):
        for col in range(gauss_core.shape[1]):
            gauss_core[row][col] = gaussian(sigma, x[row], y[col])

    return gauss_core / gauss_core.sum()


def gaussian_blur(image, core):

    blurred_image = np.zeros((image.shape[0] - core.shape[0] + 1, image.shape[1] - core.shape[1] + 1))

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + core.shape[0] <= image.shape[0] and col + core.shape[1] <= image.shape[1]:
                batch = image[row:row + core.shape[0], col:col + core.shape[1]]
                blurred_image[row][col] = (batch * core).sum()
            else:
                continue

    return blurred_image


img = imread('img.png')
sigma = 0.66
gauss_core = create_gauss_core(sigma)
imsave('out_img.png', gaussian_blur(img, gauss_core).astype('uint8'))
"import numpy as np
from skimage.io import imread, imsave


def convolution(image, kernel):

    convolved_image = np.zeros((image.shape[0] - kernel.shape[0] + 1, image.shape[1] - kernel.shape[1] + 1))
    k = kernel / kernel.sum()

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + kernel.shape[0] <= image.shape[0] and col + kernel.shape[1] <= image.shape[1]:
                batch = image[row:row + kernel.shape[0], col:col + kernel.shape[1]]
                convolved_image[row][col] = (batch * k).sum()
            else:
                continue

    return convolved_image


img = imread('img.png')
kernel = np.array([[-1, -2, -1], [-2, 22, -2], [-1, -2, -1]])

imsave('out_img.png', np.clip(convolution(img, kernel), 0, 255).astype('uint8'))
"import numpy as np
from skimage.io import imread, imsave


def median_filter(image, filter_size):

    filtered_image = np.zeros((image.shape[0] - filter_size[0] + 1, image.shape[1] - filter_size[1] + 1))

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + filter_size[0] <= image.shape[0] and col + filter_size[1] <= image.shape[1]:
                batch = image[row:row + filter_size[0], col:col + filter_size[1]]
                filtered_image[row][col] = np.median(batch)
            else:
                continue

    return filtered_image


imsave('out_img.png', median_filter(imread('img.png'), (7, 7)).astype('uint8'))
"def modify_list(l):
    li = l.copy()
    l.clear()
    for elem in li:
        if elem % 2 == 0:
            l.append(elem // 2)
"def cc_encrypt(shift, message, alphabet):
    message = list(message)
    alphabet = list(alphabet)
    shift_border = len(alphabet)

    encrypted_chars = [alphabet[(alphabet.index(char) + shift) % shift_border] for char in message]

    return ''.join(encrypted_chars)


alphabet = ' abcdefghijklmnopqrstuvwxyz'
print('Result: ""' + cc_encrypt(int(input()), input().strip(), alphabet) + '""')
,
grades = input().replace(' ', '')
print('{:.2f}'.format((grades.count('A') / len(grades))))
"def unicode_cc_encrypt(shift, message, alphabet):
    message = [ord(char) for char in message]
    alphabet = [char for char in alphabet]
    shift_border = len(alphabet)

    encrypted_chars = [chr(alphabet[(alphabet.index(char) + shift) % shift_border]) for char in message]

    return ''.join(encrypted_chars)


alphabet = range(128512, 128592)
print('Result: ""{}""'.format(unicode_cc_encrypt(int(input()), input().strip(), alphabet)))
"import numpy as np

n, m = (int(x) for x in input().split())
lst = []

for i in range(n):
    lst.extend([int(x) for x in input().split()])

transpose_matrix = np.array(lst).reshape((n, m)).T

for row in range(transpose_matrix.shape[0]):
    print(*transpose_matrix[row])
"string = input()
sub = input()
slice_len = len(sub)
idx = []

for i in range(len(string)):
    try:
        slice_ = string[i:i+slice_len]
        if slice_ == sub:
            idx.append(i)
    except IndexError:
        pass

print(*idx) if idx else print(-1)
"cards_values = {'6': 1, '7': 2, '8': 3, '9': 4, '1': 5, 'J': 6, 'Q': 7, 'K': 8, 'A': 9}

cards = input().split()
trump = input()

if cards[0][-1] == cards[1][-1]:
    if cards_values[cards[0][0]] > cards_values[cards[1][0]]:
        print('First')
    elif cards_values[cards[0][0]] < cards_values[cards[1][0]]:
        print('Second')

elif (cards[0][-1] != cards[1][-1]) and (trump not in cards[0] and trump not in cards[1]):
    print('Error')

elif cards[0][-1] != cards[1][-1]:
    if trump in cards[0]:
        print('First')
    elif trump in cards[1]:
        print('Second')
"def twin_numbers_generator(number):
    for i in range(number + 1):
        for j in range(i):
            yield i


n = int(input())
counter = 0

for i in twin_numbers_generator(n):
    print(i, end=' ')
    counter += 1
    if counter == n:
        break
"from collections import Counter

for key, value in sorted(Counter([len(word) for word in input().split()]).items()):
    print('{0}: {1}'.format(key, value))

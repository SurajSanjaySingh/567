"from requests import get
import re
from urllib.parse import urlparse

link = input().strip()
link_text = get(link).text

# Регулярка для поиска ссылок в тексте
pattern_link = re.compile(r""(?:<a.*?\shref=[\""'])(\S+?)(?=[\""'])"")
# Регулярка для вытаскивания домена из path, если netloc не найден в URL
pattern_path = re.compile(r""^[a-z]\S+?(?=\/)|^[a-z][\w\.]+"")
# Список со всеми спарсенными URL из текста
all_links = pattern_link.findall(link_text)
# Пустой список для хранения доменов из спарсенных URL
domains = list()

for item in all_links:
    parsed = urlparse(item)  # распарсенный URL
    if parsed.netloc:  # если netloc не пустой
        if not parsed.port:  # если netloc без порта
            domains.append(parsed.netloc)
        else:  # если netloc с портом, отрезаем порт
            domains.append(parsed.netloc.replace("":"" + str(parsed.port), """"))
    else:  # если netloc пустой
        parsed_path = pattern_path.search(parsed.path)  # регуляркой пытаемся достать домен из path
        if parsed_path:  # если получилось регуляркой достать домен из path, кладем домен в domains
            domains.append(parsed_path.group())

for domain in sorted(set(domains)):
    print(domain)
,
import json

scheme = json.loads(input())
# scheme = [{""A"": []}, {""B"": [""A""]}, {""C"": [""A""]}, {""D"": [""B"
""C""]}, {""V"": [""D""]}]

parent_and_children = {item['name']: [] for item in scheme}
# {'A': [], 'B': [], 'C': [], 'D': [], 'V': []}

for item in scheme:
    for parent in parent_and_children:
        if parent in item['parents']:
            parent_and_children[parent].append(item['name'])
# {'A': ['B', 'C'], 'B': ['D'], 'C': ['D'], 'D': ['V'], 'V': []}
# если класс есть в parents - его прямые дети добавляются в словарь

for item in parent_and_children:
    parent_and_children[item] = set(parent_and_children[item])
# {'A': {'C', 'B'}, 'B': {'D'}, 'C': {'D'}, 'D': {'V'}, 'V': set()}
# словари с детьми преобразуются в множества


# https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    for upcoming in graph[start] - visited:
        dfs(graph, upcoming, visited)
    return visited


# parent_and_children = {'A': {'C', 'B'}, 'B': {'D'}, 'C': {'D'}, 'D': {'V'}, 'V': set()}
# dfs(parent_and_children, 'A') = {'A', 'D', 'C', 'V', 'B'}
for item in sorted(parent_and_children.keys()):
    print(item, ':', len(dfs(parent_and_children, item)))
,
s, a , cnt = str(input()), str(input()), 0
while a in s:
    cnt += 1
    s = s[s.find(a) + 1:]
print(cnt)
"import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.compile(r'\b[Aa]+\b').sub(""argh"
line, 1))
"n, stri = int(input()), str(input().strip())
alph = ' abcdefghijklmnopqrstuvwxyz'
code = alph[n%27:27] + alph[:n%27]
print(""Result: \"""" + stri.translate(str.maketrans(alph ,code)) + ""\"""")
"a, b = input().split()
n = int(a)
m = int(b)
fild = [[0 for i in range(0, m + 2)] for j in range (0, n + 2)]
data = [list("".""+input()+""."") for _ in range(0, n)]
data.append(list("".""*(m+2)))
data.insert(0,list("".""*(m+2)))
dx = [1, 1, 1, 0, 0, -1, -1, -1]
dy = [-1, 0, 1, -1, 1, -1, 0, 1]
for i in range(1, n+1):
    for j in range(1, m+1):
        mine_cnt = 0
        if data[i][j] == ""*"":
            fild[i][j] = ""*"
            continue
        for k  in range(8):
            if data[i + dy[k]][j + dx[k]] == ""*"":
                mine_cnt += 1
        fild[i][j] = str(mine_cnt)
for i in range(1, n+1):
        print("""".join(fild[i][1:-1]))
"print(*(lambda lst, x: [i for i, j in enumerate(lst) if j == x] if x in lst else ['None'])(input().split(), input()), end='')
"import fileinput
for i in fileinput.input():
    print(""Processing \"""" + i.strip(""\n"") + ""\"" command..."") if i != ""End"" else print(""Good bye!"")
,
from operator import add
from functools import reduce
from itertools import zip_longest

roman = input()
d = {""I"":1,""V"":5,""X"":10,""L"":50,""C"":100,""D"":500,""M"":1000}
print(reduce(add, ((-d[x], d[x])[y is None or d[x] >= d[y]] for x, y in zip_longest(roman, roman[1:]))))
"h, w = map(int, input().split())
m =[]
[m.append(input().split()) for _ in range(0, h)]
t =[[m[row][col] for row in range(0, h)] for col in range(0, w)] 
for i in t:
    print(*i)
"s, e = map(int, input().split())
print(*['FizzBuzz' if i%15 == 0 else 'Fizz' if i%3 == 0 else 'Buzz' if i%5 == 0 else i for i in range(s, e + 1)], sep = '\n')
"row, col = list(map(int, input().split()))
li = [[1 if i == 'X' else 0 for i in input()] for _ in range(row)]
lo = [['X' if li[(j-1)%(row)][(i-1)%(col)] + li[(j)%(row)][(i-1)%(col)] + li[(j+1)%(row)][(i-1)%(col)] + li[(j-1)%(row)][(i)%(col)] + li[(j+1)%(row)][(i)%(col)] + li[(j-1)%(row)][(i+1)%(col)] + li[(j)%(row)][(i+1)%(col)] + li[(j+1)%(row)][(i+1)%(col)] == 3       else ('X' if li[j][i] == 1 else '.') if li[(j-1)%(row)][(i-1)%(col)] + li[(j)%(row)][(i-1)%(col)] + li[(j+1)%(row)][(i-1)%(col)] + li[(j-1)%(row)][(i)%(col)] + li[(j+1)%(row)][(i)%(col)] + li[(j-1)%(row)][(i+1)%(col)] + li[(j)%(row)][(i+1)%(col)] + li[(j+1)%(row)][(i+1)%(col)] == 2 else '.' for i in range(col)] for j in range(row)]
[print(*lo[i], sep = """") for i, _ in enumerate(lo)]
"a = int(input())
n = a//2 + a%2
cn, lastnum = 0, 0
out = [[0 for _ in range(a)] for __ in range(a)]
while cn < n:
    for j in range(cn, a - cn):
        lastnum += 1
        out[cn][j] = lastnum
    if lastnum == a*a: break
    for j in range(cn + 1, a - cn):
        lastnum += 1
        out[j][a - cn - 1] = lastnum
    if lastnum == a*a: break
    for j in range(a - cn - 2, cn - 1, -1):
        lastnum += 1
        out[a - cn - 1][j] = lastnum
    if lastnum == a*a: break
    for j in range(a - cn - 2, cn, -1):
        lastnum += 1
        out[j][cn] = lastnum
    if lastnum == a*a: break
    cn += 1;
[print(*out[i], sep = "" "") for i in range(a)]
"import json
class Pear():
    
    def __init__(self):
        self.dic = {}
        self.lstp = []
        self.fl = False
    def add(self, instr):
        w = instr.strip().split(':')
        if len(w) == 1:
            self.dic[w[0].strip()] = []
        else:
            self.dic[w[0].strip()] = w[1].strip().split()
    
    def ifpear(self, lst):
        self.fl = False
        self.ifpear1(lst)
        return self.fl
    
    def ifpear1(self, lst) -> bool:
        if lst[0] and lst[1] in self.dic:
            if lst[0] == lst[1] or lst[0] in self.dic[lst[1]]:
                self.fl = True
            else:
                for eny in self.dic[lst[1]]:
                    self.ifpear1([lst[0],eny])
                    
    def pearcnt(self, ind) -> str:
        cnt = 0
        if ind < len(self.lstp):
            valind = self.lstp[ind]
            for i in self.lstp:
                if self.ifpear([valind, i]):
                    cnt += 1
        return str(cnt)

pp = json.loads(input())
a = Pear()
[a.add(pp[_].get(""name"") + "" : "" + ' '.join(pp[_].get(""parents""))) for _ in range(len(pp))]
s = [i for i in a.dic.keys()]
[s.extend(j) for j in a.dic.values()]
a.lstp.extend(sorted(list(set(s))))
[print(a.lstp[_] + "" : "" + a.pearcnt(_)) for _ in range(len(a.lstp))]

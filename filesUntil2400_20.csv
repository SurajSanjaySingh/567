"numberOfGames = int(input())
d = dict()
matchResult = []
def update_teams(d, team):
    if (team not in d):
        d[team] = [0, 0, 0, 0, 0]

def update_score(d, result):
    if(result[1] > result[3]):
        d[result[0]][0] += 1
        d[result[0]][1] += 1
        d[result[0]][4] += 3
        d[result[2]][0] += 1
        d[result[2]][3] += 1
    elif (result[1] == result[3]):
        d[result[0]][0] += 1
        d[result[0]][2] += 1
        d[result[0]][4] += 1
        d[result[2]][0] += 1
        d[result[2]][2] += 1
        d[result[2]][4] += 1
    else:
        d[result[2]][0] += 1
        d[result[2]][1] += 1
        d[result[2]][4] += 3
        d[result[0]][0] += 1
        d[result[0]][3] += 1

for i in range(numberOfGames):
    matchResult.append(input().split(';'))
    update_teams(d, matchResult[i][0])
    update_teams(d, matchResult[i][2])
    update_score(d, matchResult[i])

for key, values in d.items():
    print(key + ': ', values[0], values[1], values[2], values[3], values[4], end = '')
    print()
"str1, str2, encrypt, decrypt = list(input()), list(input()), list(input()), list(input())

d = dict (zip (str1, str2))
d2 = dict (zip (str2, str1))

def encr(enc):
    print(d[enc], end='')

def decr(dec):
    print(d2[dec], end='')

for i in range(len(encrypt)):
    encr(encrypt[i])
print()
for i in range(len(decrypt)):
    decr(decrypt[i])
"numberOfRecords = int(input())
famousWords = set()
for i in range(numberOfRecords):
    famousWords.add(input().lower())

a = []
numberOfLines = int(input())
for i in range(numberOfLines):
    a += (input().lower().split())
unknownWords = set(a)

for key in unknownWords:
    if (key not in famousWords):
        print(key)
"number = int(input())
d = {'восток': 0, 'север': 0}
for i in range(number):
    a = input().split()
    if (a[0] == 'север'):
        d['север'] += int(a[1])
    elif (a[0] == 'запад'):
        d['восток'] -= int(a[1])
    elif (a[0] == 'юг'):
        d['север'] -= int(a[1])
    elif (a[0] == 'восток'):
        d['восток'] += int(a[1])

for keys, values in d.items():
    print(values, end = ' ')
print(sum([int(input()) for i in range(int(input()))])),
d = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}
n = int(input())
x, y = 0, 0
s = []
a = []
turn = 0
counter = 1
c = 0
slicer = 1

for i in range(1, n*n+1):
  a.append(i)
  if (len(a) == n):
    s.append(a)
    a = []

while ((counter <= n*n) and (n > 1)):
  for i in range(0, n - slicer):
    if (counter == 1):
      s[x][y] = counter
      counter += 1
    x += d[turn % 4][0]
    y += d[turn % 4][1]
    s[x][y] = counter
    counter += 1
  turn += 1
  if ((c % 2 == 0)and (c > 1)):
    slicer += 1
  c += 1
  
for i in range(0, n):
  print(*s[i])
"s = set()
for obj in objects:
  s.add(id(obj))
  
print(len(s))
"def closest_mod_5(x):
  y = x
  while(y % 5 != 0):
    y += 1
  else:
    return y
"def closest_mod_5(x):
    return x + 5 - x % 5
"def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return closest_mod_5(x + 1)
"n, k = map(int, input().split())
def combinations(n, k):
  if (k == 0):
    return 1
  elif (k > n):
    return 0
  else:
    return combinations(n - 1, k) + combinations(n - 1, k - 1)

print(combinations(n, k))
"d = dict()
d['global'] = {'parent': 'None'}
def creating(nmsp, var):
  d[nmsp] = {'parent': (var)}

def adding(nmsp, var):
  if (nmsp in d):
    if ('var' in d[nmsp]):
      d[nmsp]['var'] += [var]
    else:
      d[nmsp].update({'var': [var]})

def reception(nmsp, var):
  if (d[nmsp].get('parent', ()) == 'None' and var not in d[nmsp].get('var', [])):
    print(d[nmsp].get('parent', ()))
  elif (var in d[nmsp].get('var', [])):
    print(nmsp)
  else:
    return reception(d[nmsp].get('parent', ()), var)

def actionSelection(cmd, nmsp, var):
  if (cmd == 'create'):
    creating(nmsp, var)
  elif (cmd == 'add'):
    adding(nmsp, var)
  else:
    reception(nmsp, var)

for i in range(int(input())):
  cmd, nmsp, var = input().split()
  actionSelection(cmd, nmsp, var)
"class MoneyBox:
  def __init__(self, capacity):
    self.capacity = capacity
    self.amount = 0

  def can_add(self, v):
    self.v = v
    if (self.amount + self.v <= self.capacity):
      return True
    else:
      return False

  def add(self, v):
    self.amount += v
"class Buffer:
  def __init__(self):
    self.list = []

  def add(self, *a):
    for arg in a:
      self.list.append(arg)
      if (len(self.list) == 5):
        print(sum(self.list))
        self.list = []

  def get_current_part(self):
    return self.list
"graph = {}

def find_all_paths(graph, start, end, path=[]):
  path = path + [start]
  if (start and end in graph):
    if start == end:
      return [path]
  if (start not in graph):
    return []
  paths = []
  for node in graph[start]:
    if node not in path:
      newpath = find_all_paths(graph, node, end, path)
      if newpath: 
        return newpath 
  if paths:
    return paths
          
def az(graph, start, end):
  x = find_all_paths(graph, start, end)
  if (x != None and x != []):
    return 'Yes'
  else:
    return 'No'

for i in range(int(input())):
  total = input()
  if (':' in total):
    el, parent = total.split(':')
    el = el.replace(' ', '')
    parent = parent.split()
    graph[el] = parent
  else:
    graph[total] = [total]
  # print(graph)

for i in range(int(input())):
  check = input().split()
  print(az(graph, check[1], check[0]))
"class ExtendedStack(list):
  def sum(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 + top2)

  def sub(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 - top2)

  def mul(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 * top2)

  def div(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 // top2)
"class LoggableList(list, Loggable):
  def append(self, msg):
    super().append(msg)
    self.log(msg)
"try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"")
"d = {}
addErr = set()
nope = []

def check(el, origin):
  if (el not in addErr and d[el] == None):
    pass
  else:
    for node in d[el]:
      if (node in addErr):
        if (origin not in nope):
          nope.append(origin)
      elif (node not in addErr and d[node] != None):
        check(node, origin)

for points in [input().split(':') for i in range(int(input()))]:
  if(len(points) > 1):
    d[points[0].replace(' ', '')] = tuple(points[1].split())
  else:
    d[points[0].replace(' ', '')] = (None)

for points in [input().replace(' ', '') for i in range(int(input()))]:
  check(points, points)
  addErr.add(points)

for x in nope:
  print(x)
"class NonPositiveError(Exception):
  pass

class PositiveList(list):
  def append(self, x):
    if (x <= 0):
      raise NonPositiveError
    else:
      super().append(x)
